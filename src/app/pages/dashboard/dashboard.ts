import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BaseChartDirective } from 'ng2-charts';
import { ChartData, ChartOptions } from 'chart.js';
import { DatePickerModule } from 'primeng/datepicker';
import { FormsModule } from '@angular/forms';
import { Subscription } from 'rxjs';

// Import models and services
import { 
  EnergyData, 
  MeterEnergyData, 
  PlantData, 
  DetailedDeviceData, 
  DetailedMeterData,
  DetailedPlantData,
  MetricCard,
  AppState
} from '../../models';
import { EnergyService, ChartService } from '../../services';


@Component({
  selector: 'app-dashboard',
  imports: [CommonModule, BaseChartDirective, DatePickerModule, FormsModule],
  templateUrl: './dashboard.html',
  styleUrl: './dashboard.css'
})
export class Dashboard implements OnInit, OnDestroy {
  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;
  
  // Subscriptions
  private subscriptions = new Subscription();

  // Component state (reactive from services)
  appState: AppState = {
    loading: {
      isLoading: false,
      isInverterLoading: false,
      isMeterLoading: false,
      isPlantLoading: false,
      isDetailedInverterLoading: false,
      isDetailedMeterLoading: false,
      isDetailedPlantLoading: false
    },
    error: '',
    showRefreshReminder: false,
    currentMonth: '09',
    currentYear: '2025',
    selectedDate: new Date(2025, 8),
    detailedDateRange: [new Date(2025, 8, 1), new Date(2025, 8, 10)],
    detailedPlantDate: new Date(2025, 8, 31),
    authToken: ''
  };

  // Data from services
  metricCards: MetricCard[] = [];
  inverterData: EnergyData[] = [];
  meterData: MeterEnergyData[] = [];
  plantData: PlantData[] = [];
  detailedInverterData: DetailedDeviceData[] = [];
  detailedMeterData: DetailedMeterData[] = [];
  detailedPlantData: DetailedPlantData[] = [];

  // Chart configurations (generated by ChartService)
  public chartType = 'line' as const;
  public inverterChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public inverterChartOptions: ChartOptions<'line'> = {};
  public meterChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public meterChartOptions: ChartOptions<'line'> = {};
  public plantChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public plantChartOptions: ChartOptions<'line'> = {};
  public detailedInverterChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public detailedInverterChartOptions: ChartOptions<'line'> = {};
  public detailedMeterSummaryChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public detailedMeterSummaryChartOptions: ChartOptions<'line'> = {};
  public detailedMeterChartData: ChartData<'line'> = { labels: [], datasets: [] };
  public detailedMeterChartOptions: ChartOptions<'line'> = {};
  public detailedPlantChartData: ChartData<'polarArea'> = { labels: [], datasets: [] };
  public detailedPlantChartOptions: ChartOptions<'polarArea'> = {};

  constructor(
    private energyService: EnergyService,
    private chartService: ChartService
  ) {}

  get chartUnit() {
    return 'kWh';
  }

  ngOnInit(): void {
    console.log('🔧 Dashboard component initialized');
    this.setupSubscriptions();
  }

  ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }

  /**
   * Setup subscriptions to services
   */
  private setupSubscriptions(): void {
    // Subscribe to app state
    this.subscriptions.add(
      this.energyService.appState$.subscribe(state => {
        this.appState = state;
      })
    );

    // Subscribe to data streams
    this.subscriptions.add(
      this.energyService.inverterData$.subscribe(data => {
        this.inverterData = data;
        this.updateInverterChart();
      })
    );

    this.subscriptions.add(
      this.energyService.meterData$.subscribe(data => {
        this.meterData = data;
        this.updateMeterChart();
      })
    );

    this.subscriptions.add(
      this.energyService.plantData$.subscribe(data => {
        this.plantData = data;
        this.updatePlantChart();
      })
    );

    this.subscriptions.add(
      this.energyService.detailedInverterData$.subscribe(data => {
        this.detailedInverterData = data;
        this.updateDetailedInverterChart();
      })
    );

    this.subscriptions.add(
      this.energyService.detailedMeterData$.subscribe(data => {
        this.detailedMeterData = data;
        this.updateDetailedMeterSummaryChart();
        this.updateDetailedMeterChart();
      })
    );

    this.subscriptions.add(
      this.energyService.detailedPlantData$.subscribe(data => {
        this.detailedPlantData = data;
        this.updateDetailedPlantChart();
      })
    );

    this.subscriptions.add(
      this.energyService.metricCards$.subscribe(cards => {
        this.metricCards = cards;
      })
    );
  }

  // Chart update methods
  private updateInverterChart(): void {
    console.log('🎯 Updating inverter chart with data:', this.inverterData);
    const title = `Solar Production - ${this.energyService.getCurrentDateDisplayText()}`;
    this.inverterChartData = this.chartService.createInverterChartData(this.inverterData, title);
    this.inverterChartOptions = this.chartService.getInverterChartOptions(title);
    console.log('📈 Inverter chart config:', this.inverterChartData);
    this.forceChartUpdate();
  }

  private updateMeterChart(): void {
    const title = `Grid Energy Flow - ${this.energyService.getCurrentDateDisplayText()}`;
    this.meterChartData = this.chartService.createMeterChartData(this.meterData, title);
    this.meterChartOptions = this.chartService.getMeterChartOptions(title);
    this.forceChartUpdate();
  }

  private updatePlantChart(): void {
    const title = `Plant Energy Overview - ${this.energyService.getCurrentDateDisplayText()}`;
    this.plantChartData = this.chartService.createPlantChartData(this.plantData, title);
    this.plantChartOptions = this.chartService.getPlantChartOptions(title);
    this.forceChartUpdate();
  }

  private updateDetailedInverterChart(): void {
    console.log('🎯 Updating DETAILED inverter chart with data:', this.detailedInverterData);
    const title = `Detailed Solar Production - ${this.energyService.getDetailedDateRangeText()}`;
    this.detailedInverterChartData = this.chartService.createDetailedInverterChartData(this.detailedInverterData, title);
    this.detailedInverterChartOptions = this.chartService.getDetailedChartOptions(title);
    console.log('📈 DETAILED inverter chart config:', this.detailedInverterChartData);
  }

  private updateDetailedMeterSummaryChart(): void {
    console.log('🎯 Updating DETAILED meter SUMMARY chart with data:', this.detailedMeterData);
    const title = `Detailed Meter Summary - ${this.energyService.getDetailedDateRangeText()}`;
    this.detailedMeterSummaryChartData = this.chartService.createDetailedMeterSummaryChartData(this.detailedMeterData, title);
    this.detailedMeterSummaryChartOptions = this.chartService.getDetailedChartOptions(title);
    console.log('📈 DETAILED meter SUMMARY chart config:', this.detailedMeterSummaryChartData);
  }

  private updateDetailedMeterChart(): void {
    console.log('🎯 Updating DETAILED meter CT BREAKDOWN chart with data:', this.detailedMeterData);
    const title = `Detailed Meter CT Breakdown - ${this.energyService.getDetailedDateRangeText()}`;
    this.detailedMeterChartData = this.chartService.createDetailedMeterChartData(this.detailedMeterData, title);
    this.detailedMeterChartOptions = this.chartService.getDetailedChartOptions(title);
    console.log('📈 DETAILED meter CT BREAKDOWN chart config:', this.detailedMeterChartData);
  }

  private updateDetailedPlantChart(): void {
    console.log('🎯 Updating DETAILED plant POLAR AREA chart with data:', this.detailedPlantData);
    const title = `Plant Energy Breakdown - ${this.energyService.getDetailedPlantDateText()}`;
    
    try {
      this.detailedPlantChartData = this.chartService.createDetailedPlantChartData(this.detailedPlantData, title);
      this.detailedPlantChartOptions = this.chartService.getDetailedPlantChartOptions(title);
      
      console.log('📊 DETAILED plant POLAR AREA chart config:', this.detailedPlantChartData);
      console.log('📊 Chart options:', this.detailedPlantChartOptions);
      console.log('📊 Chart has data?', this.detailedPlantChartData?.datasets?.length > 0);
      
      // Force change detection
      setTimeout(() => {
        console.log('🔄 Force updating chart after timeout');
      }, 100);
      
    } catch (error) {
      console.error('❌ Error updating polar area chart:', error);
    }
  }

  private forceChartUpdate(): void {
    setTimeout(() => {
      if (this.chart) {
        this.chart.update();
      }
    }, 10);
  }

  // Event handlers (delegate to service)
  onMonthChange(event: Event): void {
    const target = event.target as HTMLSelectElement;
    const newMonth = target.value;
    this.energyService.changeDateSettings(newMonth, this.appState.currentYear);
  }

  onYearChange(event: Event): void {
    const target = event.target as HTMLSelectElement;
    const newYear = target.value;
    this.energyService.changeDateSettings(this.appState.currentMonth, newYear);
  }

  onDatePickerChange(selectedDate: Date | null): void {
    if (selectedDate) {
      const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
      const year = selectedDate.getFullYear().toString();
      this.energyService.changeDateSettings(month, year);
    }
  }

  onDetailedDateRangeChange(selectedDateRange: Date[] | null): void {
    if (selectedDateRange && selectedDateRange.length === 2 && selectedDateRange[0] && selectedDateRange[1]) {
      this.energyService.changeDetailedDateRange(selectedDateRange);
      console.log('📅 Detailed date range changed to:', this.energyService.getDetailedDateRangeText());
    }
  }

  onDetailedPlantDateChange(selectedDate: Date | null): void {
    if (selectedDate) {
      this.energyService.changeDetailedPlantDate(selectedDate);
      console.log('📅 Detailed plant date changed to:', this.energyService.getDetailedPlantDateText());
    }
  }

  // Action methods (delegate to service)
  async changeToken(): Promise<void> {
    await this.energyService.promptForToken();
  }

  async refreshData(): Promise<void> {
    await this.energyService.refreshAllData();
  }

  async refreshInverterData(): Promise<void> {
    await this.energyService.refreshInverterData();
  }

  async refreshMeterData(): Promise<void> {
    await this.energyService.refreshMeterData();
  }

  async refreshPlantData(): Promise<void> {
    await this.energyService.refreshPlantData();
  }

  async refreshDetailedData(): Promise<void> {
    await this.energyService.refreshDetailedData();
  }

  async refreshDetailedInverterData(): Promise<void> {
    await this.energyService.refreshDetailedInverterData();
  }

  async refreshDetailedMeterData(): Promise<void> {
    await this.energyService.refreshDetailedMeterData();
  }

  async refreshDetailedPlantData(): Promise<void> {
    await this.energyService.refreshDetailedPlantData();
  }

  // Computed properties (delegate to service)
  get currentDateDisplayText(): string {
    return this.energyService.getCurrentDateDisplayText();
  }

  get detailedDateRangeText(): string {
    return this.energyService.getDetailedDateRangeText();
  }

  get detailedPlantDateText(): string {
    return this.energyService.getDetailedPlantDateText();
  }

  get hasValidToken(): boolean {
    return this.energyService.hasValidToken();
  }

  // Getters for template compatibility with old SVG line charts
  getInverterLinePoints(): string {
    return this.inverterData
      .map((data, index) => {
        const x = (index * 800 / (this.inverterData.length - 1));
        const y = 320 - (data.value * 6);
        return `${x},${y}`;
      })
      .join(' ');
  }

  getExportMainLinePoints(): string {
    return this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.exportMain * 6);
        return `${x},${y}`;
      })
      .join(' ');
  }

  getExportTariff2LinePoints(): string {
    return this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.exportTariff2 * 6);
        return `${x},${y}`;
      })
      .join(' ');
  }

  getImportMainLinePoints(): string {
    return this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.importMain * 6);
        return `${x},${y}`;
      })
      .join(' ');
  }

  getImportTariff2LinePoints(): string {
    return this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.importTariff2 * 6);
        return `${x},${y}`;
      })
      .join(' ');
  }

  getInverterAreaPoints(): string {
    const linePoints = this.inverterData
      .map((data, index) => {
        const x = (index * 800 / (this.inverterData.length - 1));
        const y = 320 - (data.value * 6);
        return `${x},${y}`;
      });
    
    const startPoint = `0,320`;
    const endPoint = `800,320`;
    return [startPoint, ...linePoints, endPoint].join(' ');
  }

  getExportMainAreaPoints(): string {
    const linePoints = this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.exportMain * 6);
        return `${x},${y}`;
      });
    
    const startPoint = `0,320`;
    const endPoint = `800,320`;
    return [startPoint, ...linePoints, endPoint].join(' ');
  }

  getExportTariff2AreaPoints(): string {
    const linePoints = this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.exportTariff2 * 6);
        return `${x},${y}`;
      });
    
    const startPoint = `0,320`;
    const endPoint = `800,320`;
    return [startPoint, ...linePoints, endPoint].join(' ');
  }

  getImportMainAreaPoints(): string {
    const linePoints = this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.importMain * 6);
        return `${x},${y}`;
      });
    
    const startPoint = `0,320`;
    const endPoint = `800,320`;
    return [startPoint, ...linePoints, endPoint].join(' ');
  }

  getImportTariff2AreaPoints(): string {
    const linePoints = this.meterData
      .map((data, index) => {
        const x = (index * 800 / (this.meterData.length - 1));
        const y = 320 - (data.importTariff2 * 6);
        return `${x},${y}`;
      });
    
    const startPoint = `0,320`;
    const endPoint = `800,320`;
    return [startPoint, ...linePoints, endPoint].join(' ');
  }
}
